import os
import asyncio
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes

# ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è =====
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YOOMONEY_WALLET = os.getenv("YOOMONEY_WALLET")
RAILWAY_URL = os.getenv("RAILWAY_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://mybot.up.railway.app

if not BOT_TOKEN or not YOOMONEY_WALLET or not RAILWAY_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN, YOOMONEY_WALLET –∏–ª–∏ RAILWAY_URL")

bot = Bot(BOT_TOKEN)
application = Application.builder().token(BOT_TOKEN).updater(None).build()
app = Flask(__name__)

# ===== –ö–æ–º–∞–Ω–¥–∞ /buy =====
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    amount = 1
    pay_url = (
        f"https://yoomoney.ru/quickpay/confirm.xml?"
        f"receiver={YOOMONEY_WALLET}&quickpay-form=shop&targets=–û–ø–ª–∞—Ç–∞+–¥–æ—Å—Ç—É–ø–∞"
        f"&paymentType=SB&sum={amount}&label={user_id}"
    )
    await update.message.reply_text(
        f"üí≥ –û–ø–ª–∞—Ç–∞: {pay_url}\n\n–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç –¥–æ—Å—Ç—É–ø ‚úÖ"
    )

application.add_handler(CommandHandler("buy", buy))

# ===== Webhook Telegram =====
@app.route(f"/webhook/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.update_queue.put_nowait(update)
    return "OK", 200

# ===== HTTP-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ÆMoney =====
@app.route("/notify", methods=["POST"])
def notify():
    data = request.form  # –ÆMoney –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    label = data.get("label")  # —ç—Ç–æ user_id, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ pay_url
    status = data.get("status")  # "success" –∏–ª–∏ –¥—Ä—É–≥–æ–µ
    
    if status == "success" and label:
        try:
            user_id = int(label)
            asyncio.run(send_access(user_id))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ—Å—Ç—É–ø–∞: {e}")
    return "OK", 200

# ===== –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é =====
async def send_access(user_id):
    await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.")

# ===== –°—Ç–∞–≤–∏–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ =====
async def setup_webhook():
    await bot.delete_webhook()
    await bot.set_webhook(url=f"{RAILWAY_URL}/webhook/{BOT_TOKEN}")
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {RAILWAY_URL}/webhook/{BOT_TOKEN}")

if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–≤–∏–º webhook
    asyncio.run(setup_webhook())
    
    # –ó–∞–ø—É—Å–∫ Flask
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
